#!/usr/bin/env python3

import sys
import random

allwords=[]
with open('words.txt') as f:#https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt
    lines = f.read().splitlines() 
    allwords=lines[:]

allSyms= ["~","`","!","@","#","$","%","^","&","*","(",")","[","]","{","}",";",":","'",'"',",","<",".",">","?","/","-","_","=","+"]

manstring="""usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]
                
Generate a secure, memorable password using the XKCD method
                
optional arguments:
    -h, --help            show this help message and exit
    -w WORDS, --words WORDS
                          include WORDS words in the password (default=4)
    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words
                          (default=0)
    -n NUMBERS, --numbers NUMBERS
                          insert NUMBERS random numbers in the password
                          (default=0)
    -s SYMBOLS, --symbols SYMBOLS
                          insert SYMBOLS random symbols in the password
                          (default=0)"""

def parse():
    inputs = sys.argv
    inputs.pop(0)#remove first arg, program name
    elements = []
    
    numWords = 4
    numNum=0
    numSym=0
    numCaps=0
    while len(inputs)>0:
        if(inputs[0]=="-h" or inputs[0]=="--help"):
            return manstring;
        if len(inputs)%2!=0:
            return "error, incorrect number of arguments for selected command!"

        if (inputs[0]=="-w" or inputs[0]=="--words") and inputs[1].isdigit():
            numWords=int(inputs[1])
            inputs.pop(0)
            inputs.pop(0)
        elif (inputs[0]=="-c" or inputs[0]=="--caps") and inputs[1].isdigit():
            numCaps=int(inputs[1])
            inputs.pop(0)
            inputs.pop(0)
        elif (inputs[0]=="-n" or inputs[0]=="--numbers") and inputs[1].isdigit():
            numNum=int(inputs[1])
            inputs.pop(0)
            inputs.pop(0)
        elif (inputs[0]=="-s" or inputs[0]=="--symbols") and inputs[1].isdigit():
            numSym=int(inputs[1])
            inputs.pop(0)
            inputs.pop(0)
        else:
            return "user error!"
    
    while numWords>0:
        word=allwords[random.randint(0, len(allwords)-1)]
        elements.append(word)
        numWords-=1
    index=0
    if numCaps>len(elements):
        numCaps=len(elements)
    while numCaps>0:
        elements[index]=elements[index].capitalize()
        index+=1
        numCaps-=1
    while numNum>0:
        elements.append(str(random.randint(0, 9)))
        numNum-=1
    while numSym>0:
        elements.append(allSyms[random.randint(0, len(allSyms)-1)])
        numSym-=1
    random.shuffle(elements)
    return "".join(elements) 

print(parse())
